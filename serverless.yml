service: tennis-community-api-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  secrets: ${file(config.prod.yml)}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  create_swing_upload:
    handler: bin/create_swing_upload
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: uploads
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  get_recent_swing_uploads:
    handler: bin/get_recent_swing_uploads
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: uploads
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  update_upload_clips:
    handler: bin/update_upload_clips
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}

  update_upload_swings:
    handler: bin/update_upload_swings
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}

  get_album:
    handler: bin/get_album
    environment:
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: albums/{id}
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  get_user_albums:
    handler: bin/get_user_albums
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: albums
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  update_album:
    handler: bin/update_album
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: albums/{id}
          method: put
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  create_user:
    handler: bin/create_user
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  sign_in:
    handler: bin/sign_in
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/sign_in
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  confirm_user:
    handler: bin/confirm_user
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/{id}/confirm_user
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  get_user:
    handler: bin/get_user
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  clear_notifications:
    handler: bin/clear_notifications
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/clear_notifications
          method: put
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  send_friend_req:
    handler: bin/send_friend_req
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/friend_reqs
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  accept_friend_req:
    handler: bin/accept_friend_req
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/friend_reqs/{reqId}
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  unfriend:
    handler: bin/unfriend
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/friends/{friendId}
          method: delete
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"
