# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tennis-community-api-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  secrets: ${file(config.prod.yml)}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  create_swing_upload:
    handler: bin/create_swing_upload
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: uploads
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  get_recent_swing_uploads:
    handler: bin/get_recent_swing_uploads
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: uploads
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  update_upload_clips:
    handler: bin/update_upload_clips
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}

  update_upload_swings:
    handler: bin/update_upload_swings
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}

  get_album:
    handler: bin/get_album
    environment:
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: albums/{id}
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  get_user_albums:
    handler: bin/get_user_albums
    environment:
      UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
      UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
      UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
      UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
      ALBUMS_DB_NAME: ${self:custom.secrets.ALBUMS_DB_NAME}
      ALBUMS_DB_HOST: ${self:custom.secrets.ALBUMS_DB_HOST}
      ALBUMS_DB_USER: ${self:custom.secrets.ALBUMS_DB_USER}
      ALBUMS_DB_PWD: ${self:custom.secrets.ALBUMS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
    events:
      - http:
          path: albums
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  create_user:
    handler: bin/create_user
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  sign_in:
    handler: bin/sign_in
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/sign_in
          method: post
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  confirm_user:
    handler: bin/confirm_user
    environment:
      USERS_DB_NAME: ${self:custom.secrets.USERS_DB_NAME}
      USERS_DB_HOST: ${self:custom.secrets.USERS_DB_HOST}
      USERS_DB_USER: ${self:custom.secrets.USERS_DB_USER}
      USERS_DB_PWD: ${self:custom.secrets.USERS_DB_PWD}
      JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
      JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
      FROM_EMAIL: ${self:custom.secrets.FROM_EMAIL}
      EMAIL_PWD: ${self:custom.secrets.EMAIL_PWD}
      SMTP_HOST: ${self:custom.secrets.SMTP_HOST}
      SMTP_PORT: ${self:custom.secrets.SMTP_PORT}
      API_HOST: ${self:custom.secrets.API_HOST}
    events:
      - http:
          path: users/{id}/confirm_user
          method: get
          cors:
            origin: "http://localhost:3000"
            allowCredentials: "true"

  # get_swing_upload_url:
  #   handler: bin/get_swing_upload_url
  #   environment:
  #     UPLOADS_DB_NAME: ${self:custom.secrets.UPLOADS_DB_NAME}
  #     UPLOADS_DB_HOST: ${self:custom.secrets.UPLOADS_DB_HOST}
  #     UPLOADS_DB_USER: ${self:custom.secrets.UPLOADS_DB_USER}
  #     UPLOADS_DB_PWD: ${self:custom.secrets.UPLOADS_DB_PWD}
  #     JWT_KEY_PATH: ${self:custom.secrets.JWT_KEY_PATH}
  #     JWT_SECRET_PATH: ${self:custom.secrets.JWT_SECRET_PATH}
  #     UPLOADS_AWS_ACCESS_KEY_ID: ${self:custom.secrets.AWS_ACCESS_KEY_ID}
  #     UPLOADS_AWS_SECRET_ACCESS_KEY: ${self:custom.secrets.AWS_SECRET_ACCESS_KEY}
  #     BUCKET_NAME: ${self:custom.secrets.BUCKET_NAME}
  #   events:
  #     - http:
  #         path: uploads/get_swing_upload_url
  #         method: get
  #         cors: true
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
